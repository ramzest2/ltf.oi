// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;

tg.expand();

tg.MainButton.textColor = '#FFFFFF';
tg.MainButton.color = '#2cab37';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Audio API
if (!window.AudioContext && !window.webkitAudioContext) {
    console.error('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
    tg.showAlert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const socket = new WebSocket('ws://localhost:3000'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

let audioContext;
let audioBufferQueue = [];
let isPlaying = false;

function initAudioContext() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
}

function playAudio(audioData) {
    if (!audioData || audioData.length === 0) {
        console.error('–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ');
        return;
    }

    initAudioContext();

    const audioBuffer = audioContext.createBuffer(1, audioData.length, 44100);
    const channelData = audioBuffer.getChannelData(0);
    
    for (let i = 0; i < audioData.length; i++) {
        channelData[i] = audioData[i] / 32768.0; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Int16 –≤ Float32
    }
    
    audioBufferQueue.push(audioBuffer);
    
    if (!isPlaying) {
        playNextBuffer();
    }
}

function playNextBuffer() {
    if (audioBufferQueue.length === 0) {
        isPlaying = false;
        return;
    }

    isPlaying = true;
    const source = audioContext.createBufferSource();
    source.buffer = audioBufferQueue.shift();
    source.connect(audioContext.destination);
    source.onended = playNextBuffer;
    source.start();

    console.log('–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞');
}

socket.onopen = () => {
    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
};

socket.onmessage = (event) => {
    try {
        const data = JSON.parse(event.data);
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        if (data.type === 'ai-response') {
            if (data.content && data.content.audio) {
                console.log('–ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ:', data.content.audio);
                console.log('–¢–∏–ø –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö:', typeof data.content.audio);
                console.log('–î–ª–∏–Ω–∞ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö:', data.content.audio.length);
                console.log('–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π:', data.content.audio.slice(0, 10));
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Int16Array, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
                const audioArray = data.content.audio instanceof Int16Array 
                    ? data.content.audio 
                    : new Int16Array(data.content.audio);
                
                playAudio(audioArray);
            } else {
                console.error('–ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ');
            }
            if (data.content.message) {
                processAIResponse(data.content.message);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

socket.onerror = (error) => {
    console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
    tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
};

socket.onclose = (event) => {
    if (event.wasClean) {
        console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∫–æ–¥=${event.code} –ø—Ä–∏—á–∏–Ω–∞=${event.reason}`);
    } else {
        console.error('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
        tg.showAlert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
};

let cart = {};

const fillingPrices = {
    'chicken': 25000,
    'beef': 40000,
    'shrimp': 40000,
    'falafel': 25000
};

let selectedFilling = 'chicken';

function updateMainButton() {
    let total = Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0);
    if (total > 0) {
        tg.MainButton.setText(`–ó–∞–∫–∞–∑–∞—Ç—å (${formatPrice(total)})`);
        tg.MainButton.show();
    } else {
        tg.MainButton.hide();
    }
}

document.querySelectorAll('.filling-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        document.querySelectorAll('.filling-btn').forEach(b => b.classList.remove('selected'));
        this.classList.add('selected');
        selectedFilling = this.dataset.filling;
        updateShawarmaPrice();
    });
});

function updateShawarmaPrice() {
    const priceElement = document.getElementById('shawarma-price');
    priceElement.textContent = formatPrice(fillingPrices[selectedFilling]);
}

document.getElementById('btn-shawarma').addEventListener('click', function() {
    const filling = document.querySelector('.filling-btn.selected');
    const fillingEmoji = filling ? filling.dataset.emoji : 'üêì';
    addToCart('shawarma', `–®–∞—É—Ä–º–∞ ${fillingEmoji}`, fillingPrices[selectedFilling]);
});

function addToCart(id, name, price, quantity = 1) {
    if (cart[id]) {
        cart[id].quantity += quantity;
    } else {
        cart[id] = { name, price: price * 1000, quantity };
    }
    updateCartDisplay();
    updateMainButton();
}

document.querySelectorAll('.btn').forEach(btn => {
    if (btn) {
        btn.addEventListener('click', function() {
            let id = this.id.replace('btn-', '');
            let nameElement = this.parentElement.querySelector('h3');
            let priceElement = this.parentElement.querySelector('.price');
            
            if (nameElement && priceElement) {
                let name = nameElement.textContent;
                let price = parseInt(priceElement.textContent.replace(/[^0-9]/g, ''));
                addToCart(id, name, price);
            } else {
                console.warn(`Missing name or price element for button ${id}`);
            }
        });
    } else {
        console.warn(`Button not found: ${btn}`);
    }
});

function updateCartDisplay() {
    let cartElement = document.getElementById('cart');
    if (!cartElement) {
        cartElement = document.createElement('div');
        cartElement.id = 'cart';
        document.body.appendChild(cartElement);
    }
    cartElement.innerHTML = '';
    
    for (let id in cart) {
        let item = cart[id];
        let itemElement = document.createElement('div');
        itemElement.textContent = `${item.name} x${item.quantity} - ${formatPrice(item.price * item.quantity)}`;
        
        let removeButton = document.createElement('button');
        removeButton.textContent = '–£–¥–∞–ª–∏—Ç—å';
        removeButton.onclick = () => removeFromCart(id);
        
        itemElement.appendChild(removeButton);
        cartElement.appendChild(itemElement);
    }
}

function removeFromCart(id) {
    if (cart[id]) {
        cart[id].quantity--;
        if (cart[id].quantity <= 0) {
            delete cart[id];
        }
    }
    updateCartDisplay();
    updateMainButton();
}

tg.MainButton.onClick(function() {
    placeOrder();
});

let usercard = document.getElementById("usercard");
let p = document.createElement("p");
p.innerText = `${tg.initDataUnsafe.user.first_name} ${tg.initDataUnsafe.user.last_name}`;
usercard.appendChild(p);

document.addEventListener('DOMContentLoaded', function() {
    document.querySelector('.filling-btn[data-filling="chicken"]').classList.add('selected');
    updateShawarmaPrice();
    updateCartDisplay();
    updateMainButton();
    console.log('Page loaded, MainButton initialized');
});

function formatPrice(price) {
    return `${(price / 1000).toFixed(0)}k —Ä—É–ø–∏–π`;
}

document.getElementById('voiceOrderBtn').addEventListener('click', function() {
    console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞');
    let voiceInput = document.getElementById('voiceInput');
    voiceInput.value = '–°–ª—É—à–∞—é...';
    this.disabled = true;
    this.textContent = '–°–ª—É—à–∞—é...';

    if ('webkitSpeechRecognition' in window) {
        let recognition = new webkitSpeechRecognition();
        recognition.lang = 'ru-RU';
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;

        recognition.start();

        recognition.onresult = function(event) {
            let result = event.results[0][0].transcript;
            console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', result);
            voiceInput.value = result;

            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'user-message', content: result }));
            } else {
                console.error('WebSocket –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –°—Ç–∞—Ç—É—Å:', socket.readyState);
                tg.showAlert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        };

        recognition.onerror = function(event) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
            let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏.';
            switch(event.error) {
                case 'network':
                    errorMessage += ' –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
                    break;
                case 'not-allowed':
                case 'service-not-allowed':
                    errorMessage += ' –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.';
                    break;
                case 'aborted':
                    errorMessage += ' –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ.';
                    break;
                case 'no-speech':
                    errorMessage += ' –†–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –≥—Ä–æ–º—á–µ.';
                    break;
                case 'audio-capture':
                    errorMessage += ' –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—Ö–≤–∞—Ç–æ–º –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –º–∏–∫—Ä–æ—Ñ–æ–Ω.';
                    break;
                default:
                    errorMessage += ' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            }
            voiceInput.value = '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏';
            tg.showAlert(errorMessage);
        };

        recognition.onend = function() {
            console.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            document.getElementById('voiceOrderBtn').disabled = false;
            document.getElementById('voiceOrderBtn').textContent = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
        };
    } else {
        console.error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
        voiceInput.value = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
        tg.showAlert('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.');
        this.disabled = false;
        this.textContent = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥';
    }
});

function processAIResponse(response) {
    console.log('Processing AI response:', response);
    if (typeof response === 'object' && response.type === 'audio') {
        playAudio(response.content);
    } else if (typeof response === 'string') {
        if (response.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É')) {
            const match = response.match(/–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É (\d+) (.+)/i);
            if (match) {
                const quantity = parseInt(match[1]);
                const item = match[2];
                addToCartFromVoice(item, quantity);
            }
        } else if (response.toLowerCase().includes('–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')) {
            placeOrder();
        }
    }
}

function addToCartFromVoice(item, quantity) {
    const menuItem = findMenuItem(item);
    if (menuItem) {
        addToCart(menuItem.id, menuItem.name, menuItem.price, quantity);
        tg.showAlert(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${menuItem.name} x${quantity}`);
    } else {
        tg.showAlert(`–¢–æ–≤–∞—Ä "${item}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–Ω—é`);
    }
}

function findMenuItem(itemName) {
    const menu = [
        {id: 'shawarma_chicken', name: '–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π', price: 25},
        {id: 'shawarma_beef', name: '–®–∞—É—Ä–º–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', price: 40},
        {id: 'shawarma_shrimp', name: '–®–∞—É—Ä–º–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏', price: 40},
        {id: 'falafel', name: '–§–∞–ª–∞—Ñ–µ–ª—å', price: 25},
        {id: 'pita', name: '–ü–∏—Ç–∞', price: 25},
        {id: 'hummus',
