import { RealtimeClient } from './src/lib/realtime-api-beta/index.js';

let tg = window.Telegram.WebApp;

tg.expand();

tg.MainButton.textColor = '#FFFFFF';
tg.MainButton.color = '#2cab37';

let cart = {};

const client = new RealtimeClient({ apiKey: process.env.OPENAI_API_KEY });

client.updateSession({ 
    instructions: '–í—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ —à–∞—É—Ä–º—ã. –ü–æ–º–æ–≥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –º–µ–Ω—é.',
    voice: 'alloy',
    turn_detection: 'server_vad'
});

client.connect().then(() => {
    console.log('Connected to Realtime API');
}).catch(error => {
    console.error('Failed to connect to Realtime API:', error);
});

function updateMainButton() {
    let total = Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0);
    if (total > 0) {
        tg.MainButton.setText(`–ó–∞–∫–∞–∑–∞—Ç—å (${formatPrice(total)})`);
        tg.MainButton.show();
    } else {
        tg.MainButton.hide();
    }
}

let selectedFilling = 'chicken';
const fillingPrices = {
    'chicken': 35000,
    'beef': 40000,
    'shrimp': 40000,
    'falafel': 25000
};

document.querySelectorAll('.filling-btn').forEach(btn => {
    btn.addEventListener('click', function() {
        document.querySelectorAll('.filling-btn').forEach(b => b.classList.remove('selected'));
        this.classList.add('selected');
        selectedFilling = this.dataset.filling;
        updateShawarmaPrice();
    });
});

function updateShawarmaPrice() {
    const priceElement = document.getElementById('shawarma-price');
    priceElement.textContent = formatPrice(fillingPrices[selectedFilling]);
}

document.getElementById('btn-shawarma').addEventListener('click', function() {
    const filling = document.querySelector('.filling-btn.selected');
    const fillingEmoji = filling ? filling.dataset.emoji : 'üêì';
    addToCart('shawarma', `–®–∞—É—Ä–º–∞ ${fillingEmoji}`, fillingPrices[selectedFilling]);
});

function addToCart(id, name, price, quantity = 1) {
    if (cart[id]) {
        cart[id].quantity += quantity;
    } else {
        cart[id] = { name, price, quantity };
    }
    updateCartDisplay();
    updateMainButton();
}

document.querySelectorAll('.btn').forEach(btn => {
    if (btn) {
        btn.addEventListener('click', function() {
            let id = this.id.replace('btn-', '');
            let nameElement = this.parentElement.querySelector('h3');
            let priceElement = this.parentElement.querySelector('.price');
            
            if (nameElement && priceElement) {
                let name = nameElement.textContent;
                let price = parseInt(priceElement.textContent.replace(/[^0-9]/g, ''));
                addToCart(id, name, price);
            } else {
                console.warn(`Missing name or price element for button ${id}`);
            }
        });
    } else {
        console.warn(`Button not found: ${btn}`);
    }
});

function updateCartDisplay() {
    let cartElement = document.getElementById('cart');
    if (!cartElement) {
        cartElement = document.createElement('div');
        cartElement.id = 'cart';
        document.body.appendChild(cartElement);
    }
    cartElement.innerHTML = '';
    
    for (let id in cart) {
        let item = cart[id];
        let itemElement = document.createElement('div');
        itemElement.textContent = `${item.name} x${item.quantity} - ${formatPrice(item.price * item.quantity)}`;
        
        let removeButton = document.createElement('button');
        removeButton.textContent = '–£–¥–∞–ª–∏—Ç—å';
        removeButton.onclick = () => removeFromCart(id);
        
        itemElement.appendChild(removeButton);
        cartElement.appendChild(itemElement);
    }
}

function removeFromCart(id) {
    if (cart[id]) {
        cart[id].quantity--;
        if (cart[id].quantity <= 0) {
            delete cart[id];
        }
    }
    updateCartDisplay();
    updateMainButton();
}

tg.MainButton.onClick(function() {
    let order = Object.values(cart).map(item => ({
        name: item.name,
        quantity: item.quantity,
        price: item.price
    }));
    let total = Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0);
    
    try {
        tg.sendData(JSON.stringify({ order, total }));
    } catch (error) {
        console.error('Error sending data to bot:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

let usercard = document.getElementById("usercard");
let p = document.createElement("p");
p.innerText = `${tg.initDataUnsafe.user.first_name} ${tg.initDataUnsafe.user.last_name}`;
usercard.appendChild(p);

document.addEventListener('DOMContentLoaded', function() {
    document.querySelector('.filling-btn[data-filling="chicken"]').classList.add('selected');
    updateShawarmaPrice();
    updateCartDisplay();
    updateMainButton();
    console.log('Page loaded, MainButton initialized');
});

function formatPrice(price) {
    return `${(price / 1000).toFixed(0)}k —Ä—É–ø–∏–π`;
}

function speakText(text) {
    if ('speechSynthesis' in window) {
        let utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'ru-RU';
        speechSynthesis.speak(utterance);
    } else {
        console.error('–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
        tg.showAlert('–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
    }
}

document.getElementById('voiceOrderBtn').addEventListener('click', function() {
    console.log('Voice input button clicked');
    let voiceInput = document.getElementById('voiceInput');
    voiceInput.value = '–°–ª—É—à–∞—é...';

    if ('webkitSpeechRecognition' in window) {
        let recognition = new webkitSpeechRecognition();
        recognition.lang = 'ru-RU';
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;

        recognition.start();

        recognition.onresult = function(event) {
            let result = event.results[0][0].transcript;
            console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', result);
            voiceInput.value = result;
            processVoiceCommand(result);
        };

        recognition.onerror = function(event) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
            voiceInput.value = '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏';
            tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        };

        recognition.onend = function() {
            console.log('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        };
    } else {
        console.error('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
        voiceInput.value = '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è';
        tg.showAlert('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
    }
});

function processVoiceCommand(command) {
    if (command.toLowerCase().includes('–º–µ–Ω—é')) {
        client.sendUserMessageContent([{ type: 'text', text: '–ü–æ–∫–∞–∂–∏ –º–µ–Ω—é' }]);
    } else if (command.toLowerCase().includes('–∑–∞–∫–∞–∑–∞—Ç—å')) {
        client.sendUserMessageContent([{ type: 'text', text: command }]);
    } else {
        client.sendUserMessageContent([{ type: 'text', text: command }]);
    }
}

client.on('conversation.updated', ({ item, delta }) => {
    if (item.role === 'assistant' && delta && delta.text) {
        console.log('–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', delta.text);
        tg.showAlert(delta.text);
        speakText(delta.text);
    }
});

client.addTool(
  {
    name: 'get_menu',
    description: '–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
    parameters: {},
  },
  async () => {
    return {
      items: [
        { name: '–®–∞—É—Ä–º–∞ —Å –∫—É—Ä–∏—Ü–µ–π', price: fillingPrices['chicken'] },
        { name: '–®–∞—É—Ä–º–∞ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', price: fillingPrices['beef'] },
        { name: '–®–∞—É—Ä–º–∞ —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏', price: fillingPrices['shrimp'] },
        { name: '–§–∞–ª–∞—Ñ–µ–ª—å', price: fillingPrices['falafel'] },
        { name: '–ü–∏—Ç–∞', price: 25000 },
        { name: '–•—É–º—É—Å', price: 25000 },
        { name: '–®–∞—à–ª—ã–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã', price: 35000 },
        { name: '–ì—ë–∑–ª–µ–º–µ', price: 25000 },
        { name: '–ß–µ—á–µ–≤–∏—á–Ω—ã–π —Å—É–ø', price: 20000 },
      ]
    };
  }
);

client.addTool(
  {
    name: 'place_order',
    description: '–†–∞–∑–º–µ—â–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞',
    parameters: {
      type: 'object',
      properties: {
        items: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              name: { type: 'string' },
              quantity: { type: 'number' },
            },
          },
        },
      },
    },
  },
  async ({ items }) => {
    items.forEach(item => {
      let price;
      if (item.name.toLowerCase().includes('—à–∞—É—Ä–º–∞')) {
        const filling = item.name.split(' ')[2].toLowerCase();
        price = fillingPrices[filling];
      } else {
        const menuItem = document.querySelector(`.item h3:contains('${item.name}')`);
        if (menuItem) {
          const priceElement = menuItem.nextElementSibling;
          price = parseInt(priceElement.textContent.replace(/[^0-9]/g, '')) * 1000;
        }
      }
      if (price) {
        addToCart(item.name.toLowerCase(), item.name, price, item.quantity);
      }
    });
    updateCartDisplay();
    updateMainButton();
    return { status: '–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É' };
  }
);
