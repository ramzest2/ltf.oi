// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
window.onerror = function(message, source, lineno, colno, error) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', message, '–ò—Å—Ç–æ—á–Ω–∏–∫:', source, '–°—Ç—Ä–æ–∫–∞:', lineno, '–ö–æ–ª–æ–Ω–∫–∞:', colno, '–û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', function(event) {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', event.reason);
    if (tg) {
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

let audioContext;
let tg = window.Telegram.WebApp;
let socket;
let cart = {};

if (tg) {
    tg.expand();
    
    tg.MainButton.textColor = '#FFFFFF';
    tg.MainButton.color = '#2cab37';
    
    tg.onEvent('mainButtonClicked', function(){
        placeOrder();
    });
} else {
    console.error('Telegram WebApp API –Ω–µ –Ω–∞–π–¥–µ–Ω');
    alert('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
}

function initAudioContext() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    if (audioContext.state !== 'running') {
        audioContext.resume().then(() => {
            console.log('AudioContext –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', audioContext.state);
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ AudioContext:', error);
        });
    } else {
        console.log('AudioContext —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ running');
    }
}

function connectWebSocket() {
    socket = new WebSocket('ws://localhost:3000');
    socket.binaryType = 'arraybuffer';

    socket.onopen = () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    };

    socket.onmessage = (event) => {
        try {
            if (event.data instanceof ArrayBuffer) {
                playAudio(event.data);
            } else {
                const data = JSON.parse(event.data);
                console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                if (data.type === 'ai-response' && data.content) {
                    processAIResponse(data.content);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    };

    socket.onerror = (error) => {
        console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    };

    socket.onclose = (event) => {
        if (event.wasClean) {
            console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∫–æ–¥=${event.code} –ø—Ä–∏—á–∏–Ω–∞=${event.reason}`);
        } else {
            console.error('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ');
            tg.showAlert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            setTimeout(connectWebSocket, 5000);
        }
    };

    return socket;
}

function playAudio(arrayBuffer) {
    if (!arrayBuffer || arrayBuffer.byteLength === 0) {
        console.error('–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ');
        return;
    }

    console.log('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ, –¥–ª–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö:', arrayBuffer.byteLength);

    try {
        initAudioContext();

        audioContext.decodeAudioData(arrayBuffer, 
            (audioBuffer) => {
                const source = audioContext.createBufferSource();
                source.buffer = audioBuffer;
                source.connect(audioContext.destination);
                source.start();
                
                source.onended = () => {
                    console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                };
                
                console.log('–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
            },
            (error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
                tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: ' + error.message);
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
        tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: ' + error.message);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM fully loaded');

    if (window.Telegram && window.Telegram.WebApp) {
        console.log('Telegram WebApp API initialized');
        tg = window.Telegram.WebApp;

        tg.expand();

        tg.MainButton.textColor = '#FFFFFF';
        tg.MainButton.color = '#2cab37';

        if (!('AudioContext' in window) && !('webkitAudioContext' in window)) {
            console.error('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
            tg.showAlert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.');
        }

        socket = connectWebSocket();

        const fillingPrices = {
            'chicken': 25000,
            'beef': 40000,
            'shrimp': 40000,
            'falafel': 25000
        };

        let selectedFilling = 'chicken';

        function updateMainButton() {
            let total = Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0);
            if (total > 0) {
                tg.MainButton.setText(`–ó–∞–∫–∞–∑–∞—Ç—å (${formatPrice(total)})`);
                tg.MainButton.show();
            } else {
                tg.MainButton.hide();
            }
        }

        document.querySelectorAll('.filling-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.filling-btn').forEach(b => b.classList.remove('selected'));
                this.classList.add('selected');
                selectedFilling = this.dataset.filling;
                updatePrice();
            });
        });

        function updatePrice() {
            const priceElement = document.getElementById('price');
            if (priceElement) {
                priceElement.textContent = formatPrice(fillingPrices[selectedFilling]);
            }
        }

        function formatPrice(price) {
            return (price / 1000).toFixed(0) + 'k';
        }

        function addToCart(id, name, price, quantity = 1) {
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É:', id, name, price, quantity);
            console.log('–í—ã–∑–æ–≤ addToCart —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { id, name, price, quantity });
            console.trace('–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–∑–æ–≤–∞ addToCart');
            console.log('–ù–∞—á–∞–ª–æ addToCart:', id, name, price, quantity);
            
            if (cart[id]) {
                cart[id].quantity += quantity;
            } else {
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä ${id} –≤ –∫–æ—Ä–∑–∏–Ω—É`);
                cart[id] = { name, price, quantity };
            }
            
            console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã:', JSON.stringify(cart, null, 2));
            
            updateCartDisplay();
            updateMainButton();
        }

        function removeFromCart(id) {
            if (cart[id]) {
                delete cart[id];
                updateCartDisplay();
                updateMainButton();
            }
        }

        function updateCartDisplay() {
            console.log('–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
            const cartElement = document.getElementById('cart');
            if (!cartElement) {
                console.error('–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            let cartHTML = '';
            let total = 0;
            
            for (let id in cart) {
                console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', id, cart[id].name, cart[id].price, cart[id].quantity);
                const item = cart[id];
                cartHTML += `<div>${item.name} x${item.quantity} - ${formatPrice(item.price * item.quantity)}<button onclick="removeFromCart('${id}')">–£–¥–∞–ª–∏—Ç—å</button></div>`;
                total += item.price * item.quantity;
            }
            
            cartHTML += `<div>–ò—Ç–æ–≥–æ: ${formatPrice(total)}</div>`;
            
            cartElement.innerHTML = cartHTML;
            console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã:', cartHTML);
        }

        document.getElementById('add-to-cart').addEventListener('click', function() {
            const name = `–®–∞—É—Ä–º–∞ (${selectedFilling === 'chicken' ? 'üêì' : selectedFilling === 'beef' ? 'üêÑ' : selectedFilling === 'shrimp' ? 'ü¶ê' : 'ü•ô'})`;
            const price = fillingPrices[selectedFilling];
            const id = `shawarma_${selectedFilling}`;
            
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞—É—Ä–º—ã:', { id, name, price });
            
            addToCart(id, name, price);
        });

        function placeOrder() {
            let order = Object.values(cart).map(item => ({
                name: item.name,
                quantity: item.quantity,
                price: item.price
            }));
            let total = Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0);
            
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:', JSON.stringify({ order, total }, null, 2));
            
            let timeoutId = setTimeout(() => {
                tg.showAlert('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
            }, 10000); // 10 —Å–µ–∫—É–Ω–¥

            try {
                tg.sendData(JSON.stringify({ order, total }));
                console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É');
                tg.showAlert('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');
                
                // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                cart = {};
                updateCartDisplay();
                updateMainButton();
                
                clearTimeout(timeoutId);
            } catch (error) {
                clearTimeout(timeoutId);
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É:', error);
                tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        }

        function displayQRCode(qrCodeData) {
            console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞:', qrCodeData);
            if (!qrCodeData || !qrCodeData.url) {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞');
                tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return;
            }

            let qrCodeImg = document.createElement('img');
            qrCodeImg.src = qrCodeData.url;
            qrCodeImg.alt = 'QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã';
            qrCodeImg.style.maxWidth = '100%';
            
            let qrCodeContainer = document.createElement('div');
            qrCodeContainer.id = 'qrCodeContainer';
            qrCodeContainer.style.position = 'fixed';
            qrCodeContainer.style.top = '50%';
            qrCodeContainer.style.left = '50%';
            qrCodeContainer.style.transform = 'translate(-50%, -50%)';
            qrCodeContainer.style.backgroundColor = 'white';
            qrCodeContainer.style.padding = '20px';
            qrCodeContainer.style.borderRadius = '10px';
            qrCodeContainer.style.boxShadow = '0 0 10px rgba(0,0,0,0.5)';
            
            qrCodeContainer.appendChild(qrCodeImg);
            
            let closeButton = document.createElement('button');
            closeButton.textContent = '–ó–∞–∫—Ä—ã—Ç—å';
            closeButton.style.marginTop = '10px';
            closeButton.onclick = function() {
                document.body.removeChild(qrCodeContainer);
            };
            qrCodeContainer.appendChild(closeButton);
            
            document.body.appendChild(qrCodeContainer);
        }

        function playTestSound() {
            console.log('–ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ playTestSound');
            initAudioContext();
            console.log('AudioContext —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', audioContext.state);
            
            const oscillator = audioContext.createOscillator();
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
            oscillator.connect(audioContext.destination);
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.5);
            console.log('–¢–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ –∑–∞–ø—É—â–µ–Ω');
        }

        const testSoundBtn = document.getElementById('testSoundBtn');
        if (testSoundBtn) {
            console.log('Test sound button found');
            testSoundBtn.addEventListener('click', function() {
                console.log('Test sound button clicked');
                playTestSound();
            });
        } else {
            console.error('Test sound button not found');
        }

        document.addEventListener('click', function initAudioContextOnUserGesture() {
            initAudioContext();
            document.removeEventListener('click', initAudioContextOnUserGesture);
        }, { once: true });

    } else {
        console.error('Telegram WebApp API not found');
    }
});

function updateVoiceActivityDisplay(level) {
    const indicator = document.getElementById('voiceActivityIndicator');
    if (indicator) {
        indicator.style.width = `${level * 100}%`;
    }
}

function logCartState() {
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã:');
    for (let id in cart) {
        console.log(`${id}: ${JSON.stringify(cart[id])}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
window.addEventListener('online', function() {
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    tg.showAlert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.');
});

window.addEventListener('offline', function() {
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
    tg.showAlert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è qr_code_received
tg.onEvent('qr_code_received', function(qrCodeData) {
    console.log('–ü–æ–ª—É—á–µ–Ω QR-–∫–æ–¥:', qrCodeData);
    if (typeof qrCodeData === 'string') {
        try {
            qrCodeData = JSON.parse(qrCodeData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–∞:', error);
        }
    }
    if (qrCodeData && qrCodeData.url) {
        displayQRCode(qrCodeData);
    } else {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞');
        tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});
